#!/usr/bin/env node
/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('8-simple-app-chat-v3:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
var server = http.createServer(app);
//app.server = server;
//setup mongoose
var mongoose = require("mongoose");
mongoose.connect("mongodb://localhost/8-simple-app-chat-v3");
//handle socket-io
//var socket_io = require("socket.io");
////push io to global
//io = socket_io(server, {});


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')();
io.attach(server);
var redis = require('socket.io-redis');
io.adapter(redis({host: 'localhost', port: 6379}));

setInterval(function () {
    io.to("hoang anh room").emit('time', new Date);
    io.to("em be room").emit('time', "em be time");
}, 5000);

    io.on("connection", function (socket) {
        var int = Math.floor(Math.random() * 10);
        console.log(int);
        if ((int % 2) == 0) {
            socket.join("hoang anh room");
        } else {
            socket.join("em be room");
        }
        console.log(socket.id);
    });
    /**
     * Normalize a port into a number, string, or false.
     */
    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */
    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */
    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
