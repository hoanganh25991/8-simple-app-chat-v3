#!/usr/bin/env node
/**
 * SETUP REQUIREMENT FOR RUNNING APP
 */
/**
 * COMMON DEPENDENT MODULES
 */
var app = require('../app');
var debug = require('debug')('8-simple-app-chat-v3:server');
var http = require('http');
//get port
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * MONGOOSE
 */
var mongoose = require("mongoose");
var database_name = "8-simple-app-chat-v3";
mongoose.connect("mongodb://localhost/" + database_name);
/**
 * SOCKET.IO
 */
var IOServer = require("socket.io");
var ioServer = new IOServer(server, {});
var handle_socket = require("../socket-server-side.js");
//namespace = io.of(String name, Function callback);
//var nameSpaceDefault = ioServer.of("redoc"); //WRONG establish
var namespaceDefault = ioServer.of("redoc", function(socket){
    handle_socket(socket);
    //EMIT BY NAMESPACE, if namespace wrong establish >>> emit not success
    //namespaceDefault.emit("new-active-user", {oauthID: 111, diplayName: "server"});
    //socket.emit("clgt", "dkm may");
    //socket.join("dkm");
    //setInterval(function(){
    //    //socket.emit("clgt", "dkm may" + socket.id); //EMIT means emit to its self
    //TO(ROOM).EMIT means emit to ROOM
    // socket.to("dkm").emit("dkm", "i join dkm room");
    //RIGHT AFTER JOIN ROOM, not work to(room)
    //it work with the second emit
    //    socket.to(socket.id).emit("clgt", "dkm may" + socket.id);//emit to itself is not work
    //}, 1000);

});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
