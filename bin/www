#!/usr/bin/env node
/**
 * SETUP REQUIREMENT FOR RUNNING APP
 */
/**
 * COMMON DEPENDENT MODULES
 */
var app = require('../app');
var debug = require('debug')('8-simple-app-chat-v3:server');
var http = require('http');
//get port
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
//Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * MONGOOSE
 */
var mongoose = require("mongoose");
var database_name = "8-simple-app-chat-v3";
mongoose.connect("mongodb://localhost/" + database_name);
/**
 * SOCKET.IO
 */
var IOServer = require("socket.io");
var ioServer = new IOServer(server, {});
var namespaceDefault = ioServer.of("/");
//User table from mongodb database
//find user from userID
var User = require("../models/user.js");
//store active users
var list_active_users = [];
//handle app chat
namespaceDefault.on("connection", function(socket){
    //notify new socket connected
    console.log("new socket connected: %s", socket.id);
    //1. get userID from socket handshake request
    //get cookie
    var cookie = socket.handshake.headers.cookie;
    var key = "userID";
    //get userID from cookie string
    //noinspection JSCheckFunctionSignatures
    var userID = cookie.match('(^|;) ?' + key + '=([^;]*)(;|$)');
    //2. find this userID in User table
    User.findOne({oauthID: userID}, function(err, user){
        //if find success, !err, user !== null (findOne, return user object|null)
        if(!err && user !== null){
            //add this socket to room, name: userID
            socket.join(userID);
            //if this socket come from NEW-ACTIVE-USER
            if(list_active_users.hasOwnProperty(userID)){
                //do nothing, this user added
            }else{
                //add to list-active-users, then notify to others
                list_active_users[userID] = user;
                namespaceDefault.broadcast.emit("new-active-user", user);
            }
        }
    });
    //3. when user need list-active-users to choose someone chat with
    socket.on("list-active-users", function(){
        //client ask for list-active-users
        //notify him, directly
        namespaceDefault.to(socket.id).emit("list-active-users", list_active_users);
    });
    //4. listen msg from user, send it to who he want to chat with
    socket.on("clientChatMsg", function(msgObject){
        var receiver = msgObject.to;
        namespaceDefault.to(receiver).emit("clientChatMsg", msgObject);
    });
});
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
